{"version":3,"sources":["AnimatedText.tsx"],"names":["React","Platform","StyleSheet","TextInput","Animated","useAnimatedProps","useAnimatedReaction","addWhitelistedNativeProps","text","AnimatedTextInput","createAnimatedComponent","AnimatedText","style","inputRef","useRef","OS","value","data","prevData","current","animatedProps","select","web","styles","create","color"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAA+D,cAA/D;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,IACEC,gBADF,EAEEC,mBAFF,QAGO,yBAHP;AAKAF,QAAQ,CAACG,yBAAT,CAAmC;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAnC;AAOA,MAAMC,iBAAiB,GAAGL,QAAQ,CAACM,uBAAT,CAAiCP,SAAjC,CAA1B;AAEA,OAAO,MAAMQ,YAAY,GAAG,CAAC;AAAEH,EAAAA,IAAF;AAAQI,EAAAA;AAAR,CAAD,KAAwC;AAClE,QAAMC,QAAQ,GAAGb,KAAK,CAACc,MAAN,CAAkB,IAAlB,CAAjB,CADkE,CACxB;;AAE1C,MAAIb,QAAQ,CAACc,EAAT,KAAgB,KAApB,EAA2B;AACzB;AACA;AACA;AACA;AAEA;AACAT,IAAAA,mBAAmB,CACjB,MAAM;AACJ,aAAOE,IAAI,CAACQ,KAAZ;AACD,KAHgB,EAIjB,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAClB,UAAID,IAAI,KAAKC,QAAT,IAAqBL,QAAQ,CAACM,OAAlC,EAA2C;AACzCN,QAAAA,QAAQ,CAACM,OAAT,CAAiBH,KAAjB,GAAyBC,IAAzB;AACD;AACF,KARgB,CAAnB;AAUD;;AACD,QAAMG,aAAa,GAAGf,gBAAgB,CAAC,MAAM;AAC3C,WAAO;AACLG,MAAAA,IAAI,EAAEA,IAAI,CAACQ,KADN,CAEL;AACA;;AAHK,KAAP;AAKD,GANqC,CAAtC;AAOA,sBACE,oBAAC,iBAAD;AACE,IAAA,qBAAqB,EAAC,aADxB;AAEE,IAAA,QAAQ,EAAE,KAFZ;AAGE,IAAA,GAAG,EAAEf,QAAQ,CAACoB,MAAT,CAAgB;AAAEC,MAAAA,GAAG,EAAET;AAAP,KAAhB,CAHP;AAIE,IAAA,KAAK,EAAEL,IAAI,CAACQ,KAJd;AAKE,IAAA,KAAK,EAAE,CAACO,MAAM,CAACf,IAAR,EAAcI,KAAd,CALT;AAME,IAAA,aAAa,EAAEQ;AANjB,IADF;AAUD,CAtCM;AAwCP,MAAMG,MAAM,GAAGrB,UAAU,CAACsB,MAAX,CAAkB;AAC/BhB,EAAAA,IAAI,EAAE;AACJiB,IAAAA,KAAK,EAAE;AADH;AADyB,CAAlB,CAAf","sourcesContent":["// forked from https://github.com/wcandillon/react-native-redash/blob/master/src/ReText.tsx\n\nimport React from 'react';\nimport { Platform, StyleSheet, TextProps as RNTextProps } from 'react-native';\nimport { TextInput } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedReaction,\n} from 'react-native-reanimated';\n\nAnimated.addWhitelistedNativeProps({ text: true });\n\ninterface AnimatedTextProps {\n  text: Animated.SharedValue<string>;\n  style?: Animated.AnimateProps<RNTextProps>['style'];\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport const AnimatedText = ({ text, style }: AnimatedTextProps) => {\n  const inputRef = React.useRef<any>(null); // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  if (Platform.OS === 'web') {\n    // For some reason, the worklet reaction evaluates upfront regardless of any\n    // conditionals within it, causing Android to crash upon the invokation of `setNativeProps`.\n    // We are going to break the rules of hooks here so it doesn't invoke `useAnimatedReaction`\n    // for platforms outside of the web.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedReaction(\n      () => {\n        return text.value;\n      },\n      (data, prevData) => {\n        if (data !== prevData && inputRef.current) {\n          inputRef.current.value = data;\n        }\n      }\n    );\n  }\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: text.value,\n      // Here we use any because the text prop is not available in the type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  });\n  return (\n    <AnimatedTextInput\n      underlineColorAndroid=\"transparent\"\n      editable={false}\n      ref={Platform.select({ web: inputRef })}\n      value={text.value}\n      style={[styles.text, style]}\n      animatedProps={animatedProps}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    color: 'black',\n  },\n});\n"]}