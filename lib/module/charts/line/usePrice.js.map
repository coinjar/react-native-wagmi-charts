{"version":3,"sources":["usePrice.ts"],"names":["useDerivedValue","formatPrice","useLineChart","useLineChartPrice","format","precision","currentIndex","data","float","value","price","toFixed","toString","formatted","formattedPrice"],"mappings":"AAAA,SAASA,eAAT,QAAgC,yBAAhC;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAChCC,EAAAA,MADgC;AAEhCC,EAAAA,SAAS,GAAG;AAFoB,IAGyB,EAHpD,EAGwD;AAC7D,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAyBL,YAAY,EAA3C;AAEA,QAAMM,KAAK,GAAGR,eAAe,CAAC,MAAM;AAClC,QAAI,OAAOM,YAAY,CAACG,KAApB,KAA8B,WAA9B,IAA6CH,YAAY,CAACG,KAAb,KAAuB,CAAC,CAAzE,EACE,OAAO,EAAP;AACF,QAAIC,KAAK,GAAG,CAAZ;AACAA,IAAAA,KAAK,GAAGH,IAAI,CAACD,YAAY,CAACG,KAAd,CAAJ,CAAyBA,KAAjC;AACA,WAAOC,KAAK,CAACC,OAAN,CAAcN,SAAd,EAAyBO,QAAzB,EAAP;AACD,GAN4B,CAA7B;AAOA,QAAMC,SAAS,GAAGb,eAAe,CAAC,MAAM;AACtC,QAAIS,KAAK,GAAGD,KAAK,CAACC,KAAN,IAAe,EAA3B;AACA,UAAMK,cAAc,GAAGL,KAAK,GAAGR,WAAW,CAAC;AAAEQ,MAAAA;AAAF,KAAD,CAAd,GAA4B,EAAxD;AACA,WAAOL,MAAM,GACTA,MAAM,CAAC;AAAEK,MAAAA,KAAF;AAASI,MAAAA,SAAS,EAAEC;AAApB,KAAD,CADG,GAETA,cAFJ;AAGD,GANgC,CAAjC;AAQA,SAAO;AAAEL,IAAAA,KAAK,EAAED,KAAT;AAAgBK,IAAAA;AAAhB,GAAP;AACD","sourcesContent":["import { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatPrice } from '../../utils';\nimport type { TFormatterFn } from '../candle/types';\nimport { useLineChart } from './useLineChart';\n\nexport function useLineChartPrice({\n  format,\n  precision = 2,\n}: { format?: TFormatterFn<string>; precision?: number } = {}) {\n  const { currentIndex, data } = useLineChart();\n\n  const float = useDerivedValue(() => {\n    if (typeof currentIndex.value === 'undefined' || currentIndex.value === -1)\n      return '';\n    let price = 0;\n    price = data[currentIndex.value].value;\n    return price.toFixed(precision).toString();\n  });\n  const formatted = useDerivedValue(() => {\n    let value = float.value || '';\n    const formattedPrice = value ? formatPrice({ value }) : '';\n    return format\n      ? format({ value, formatted: formattedPrice })\n      : formattedPrice;\n  });\n\n  return { value: float, formatted };\n}\n"]}