{"version":3,"sources":["Context.tsx"],"names":["React","runOnJS","useAnimatedReaction","useSharedValue","LineChartDataProvider","getDomain","lineChartDataPropToArray","LineChartContext","createContext","currentX","value","currentIndex","domain","isActive","yDomain","min","max","xLength","LineChartProvider","displayName","children","data","high","low","yRange","onCurrentIndexChange","trusteeData","useMemo","map","item","_item","Array","isArray","Object","values","contextValue","Math","length","x","prevX"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,OADF,EAEEC,mBAFF,EAGEC,cAHF,QAIO,yBAJP;AAMA,SAASC,qBAAT,QAAsC,QAAtC;AAGA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,SAApD;AAEA,OAAO,MAAMC,gBAAgB,gBAAGP,KAAK,CAACQ,aAAN,CAAuC;AACrEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,KAAK,EAAE,CAAC;AAAV,GAD2D;AAErEC,EAAAA,YAAY,EAAE;AAAED,IAAAA,KAAK,EAAE,CAAC;AAAV,GAFuD;AAGrEE,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6D;AAIrEC,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAJ2D;AAKrEI,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,CADE;AAEPC,IAAAA,GAAG,EAAE;AAFE,GAL4D;AASrEC,EAAAA,OAAO,EAAE;AAT4D,CAAvC,CAAzB;AAsBPC,iBAAiB,CAACC,WAAlB,GAAgC,mBAAhC;AAEA,OAAO,SAASD,iBAAT,CAA2B;AAChCE,EAAAA,QADgC;AAEhCC,EAAAA,IAAI,GAAG,EAFyB;AAGhCC,EAAAA,IAHgC;AAIhCC,EAAAA,GAJgC;AAKhCC,EAAAA,MALgC;AAMhCC,EAAAA,oBANgC;AAOhCR,EAAAA;AAPgC,CAA3B,EAQoB;AACzB,QAAMR,QAAQ,GAAGN,cAAc,CAAC,CAAC,CAAF,CAA/B;AACA,QAAMQ,YAAY,GAAGR,cAAc,CAAC,CAAC,CAAF,CAAnC;AACA,QAAMU,QAAQ,GAAGV,cAAc,CAAC,KAAD,CAA/B;AAEA,QAAMuB,WAAW,GAAG1B,KAAK,CAAC2B,OAAN,CAAc,MAAM;AACtC,QAAI,CAACL,IAAD,IAAS,CAACC,GAAd,EAAmB,OAAOF,IAAP;AACnB,WAAOA,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEO,GAAN,CAAWC,IAAD,IAAU;AACzB,YAAMC,KAAK,GAAG,EAAC,GAAGD;AAAJ,OAAd;;AACA,UAAI,CAAAC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEpB,KAAP,IAAe,CAAf,GAAmBY,IAAI,GAAG,CAA9B,EAAiC;AAC/BQ,QAAAA,KAAK,CAACpB,KAAN,GAAcY,IAAd;AACD,OAFD,MAEO,IAAI,CAAAQ,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEpB,KAAP,IAAe,CAAf,GAAmBa,GAAG,GAAG,CAA7B,EAAgC;AACrCO,QAAAA,KAAK,CAACpB,KAAN,GAAca,GAAd;AACD;;AAED,aAAOO,KAAP;AACD,KATM,CAAP;AAUD,GAZmB,EAYjB,CAACT,IAAD,CAZiB,CAApB;AAcA,QAAMT,MAAM,GAAGZ,KAAK,CAAC2B,OAAN,CACb,MAAMtB,SAAS,CAAC0B,KAAK,CAACC,OAAN,CAAcN,WAAd,IAA6BA,WAA7B,GAA2CO,MAAM,CAACC,MAAP,CAAcR,WAAd,EAA2B,CAA3B,CAA5C,CADF,EAEb,CAACA,WAAD,CAFa,CAAf;AAKA,QAAMS,YAAY,GAAGnC,KAAK,CAAC2B,OAAN,CAAiC,MAAM;AAAA;;AAC1D,UAAMO,MAAM,GAAG5B,wBAAwB,CAACoB,WAAD,CAAxB,CAAsCE,GAAtC,CAA0C,CAAC;AAAElB,MAAAA;AAAF,KAAD,KAAeA,KAAzD,CAAf;AAEA,WAAO;AACLD,MAAAA,QADK;AAELE,MAAAA,YAFK;AAGLE,MAAAA,QAHK;AAILD,MAAAA,MAJK;AAKLE,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,iBAAES,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAET,GAAV,qDAAiBqB,IAAI,CAACrB,GAAL,CAAS,GAAGmB,MAAZ,CADb;AAEPlB,QAAAA,GAAG,iBAAEQ,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAER,GAAV,qDAAiBoB,IAAI,CAACpB,GAAL,CAAS,GAAGkB,MAAZ;AAFb,OALJ;AASLjB,MAAAA,OAAO,EACLA,OADK,aACLA,OADK,cACLA,OADK,GACM,CAACc,KAAK,CAACC,OAAN,CAAcN,WAAd,IAA6BA,WAA7B,GAA2CO,MAAM,CAACC,MAAP,CAAcR,WAAd,EAA2B,CAA3B,CAA5C,EAA2EW;AAVnF,KAAP;AAYD,GAfoB,EAelB,CACD1B,YADC,EAEDF,QAFC,EAGDiB,WAHC,EAIDd,MAJC,EAKDC,QALC,EAMDW,MANC,aAMDA,MANC,uBAMDA,MAAM,CAAER,GANP,EAODQ,MAPC,aAODA,MAPC,uBAODA,MAAM,CAAET,GAPP,EAQDE,OARC,CAfkB,CAArB;AA0BAf,EAAAA,mBAAmB,CACjB,MAAMS,YAAY,CAACD,KADF,EAEjB,CAAC4B,CAAD,EAAIC,KAAJ,KAAc;AACZ,QAAID,CAAC,KAAK,CAAC,CAAP,IAAYA,CAAC,KAAKC,KAAlB,IAA2Bd,oBAA/B,EAAqD;AACnDxB,MAAAA,OAAO,CAACwB,oBAAD,CAAP,CAA8Ba,CAA9B;AACD;AACF,GANgB,CAAnB;AASA,sBACE,oBAAC,qBAAD;AAAuB,IAAA,IAAI,EAAEZ;AAA7B,kBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAES;AAAlC,KACGf,QADH,CADF,CADF;AAOD","sourcesContent":["import * as React from 'react';\nimport {\n  runOnJS,\n  useAnimatedReaction,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport type { TLineChartDataProp } from './types';\nimport { LineChartDataProvider } from './Data';\n\nimport type { TLineChartContext, YRangeProp } from './types';\nimport { getDomain, lineChartDataPropToArray } from './utils';\n\nexport const LineChartContext = React.createContext<TLineChartContext>({\n  currentX: { value: -1 },\n  currentIndex: { value: -1 },\n  domain: [0, 0],\n  isActive: { value: false },\n  yDomain: {\n    min: 0,\n    max: 0,\n  },\n  xLength: 0,\n});\n\ntype LineChartProviderProps = {\n  children: React.ReactNode;\n  data: TLineChartDataProp;\n  high: number;\n  low: number;\n  yRange?: YRangeProp;\n  onCurrentIndexChange?: (x: number) => void;\n  xLength?: number;\n};\n\nLineChartProvider.displayName = 'LineChartProvider';\n\nexport function LineChartProvider({\n  children,\n  data = [],\n  high,\n  low,\n  yRange,\n  onCurrentIndexChange,\n  xLength,\n}: LineChartProviderProps) {\n  const currentX = useSharedValue(-1);\n  const currentIndex = useSharedValue(-1);\n  const isActive = useSharedValue(false);\n\n  const trusteeData = React.useMemo(() => {\n    if (!high && !low) return data\n    return data?.map((item) => {\n      const _item = {...item}\n      if (_item?.value * 1 > high * 1) {\n        _item.value = high\n      } else if (_item?.value * 1 < low * 1) {\n        _item.value = low\n      }\n\n      return _item\n    })\n  }, [data]);\n\n  const domain = React.useMemo(\n    () => getDomain(Array.isArray(trusteeData) ? trusteeData : Object.values(trusteeData)[0]),\n    [trusteeData]\n  );\n\n  const contextValue = React.useMemo<TLineChartContext>(() => {\n    const values = lineChartDataPropToArray(trusteeData).map(({ value }) => value);\n\n    return {\n      currentX,\n      currentIndex,\n      isActive,\n      domain,\n      yDomain: {\n        min: yRange?.min ?? Math.min(...values),\n        max: yRange?.max ?? Math.max(...values),\n      },\n      xLength:\n        xLength ?? (Array.isArray(trusteeData) ? trusteeData : Object.values(trusteeData)[0]).length,\n    };\n  }, [\n    currentIndex,\n    currentX,\n    trusteeData,\n    domain,\n    isActive,\n    yRange?.max,\n    yRange?.min,\n    xLength,\n  ]);\n\n  useAnimatedReaction(\n    () => currentIndex.value,\n    (x, prevX) => {\n      if (x !== -1 && x !== prevX && onCurrentIndexChange) {\n        runOnJS(onCurrentIndexChange)(x);\n      }\n    }\n  );\n\n  return (\n    <LineChartDataProvider data={trusteeData}>\n      <LineChartContext.Provider value={contextValue}>\n        {children}\n      </LineChartContext.Provider>\n    </LineChartDataProvider>\n  );\n}\n"]}