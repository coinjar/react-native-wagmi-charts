{"version":3,"sources":["Data.tsx"],"names":["React","createContext","useContext","useMemo","DefaultLineChartId","LineChartDataContext","LineChartDataProvider","children","data","contextValue","Array","isArray","LineChartIdContext","undefined","LineChartIdProvider","id","useLineChartId","useLineChartData","dataContext","validateLineChartId","otherIds","Object","keys","filter","otherId","singular","length","joinedIds","join","suggestion","console","warn","error"],"mappings":"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","sourcesContent":["import type { TLineChartData } from './types';\nimport React, { createContext, useContext, useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport type { TLineChartDataProp } from './types';\n\nexport const DefaultLineChartId = '__LineChartData';\n\nexport type LineChartDataContext = {\n  [key: string]: TLineChartData;\n};\n\nconst LineChartDataContext = createContext<LineChartDataContext>({\n  [DefaultLineChartId]: [],\n});\n\nexport type LineChartDataProviderProps = {\n  children: ReactNode;\n  data: TLineChartDataProp;\n};\n\nexport function LineChartDataProvider({\n  children,\n  data,\n}: LineChartDataProviderProps) {\n  const contextValue = useMemo<LineChartDataContext>(() => {\n    if (Array.isArray(data)) {\n      return {\n        [DefaultLineChartId]: data,\n      };\n    }\n    return data;\n  }, [data]);\n\n  return (\n    <LineChartDataContext.Provider value={contextValue}>\n      {children}\n    </LineChartDataContext.Provider>\n  );\n}\n\nconst LineChartIdContext = createContext<string | undefined>(undefined);\n\nexport function LineChartIdProvider({\n  id,\n  children,\n}: {\n  id?: string;\n  children: ReactNode;\n}) {\n  return (\n    <LineChartIdContext.Provider value={id}>\n      {children}\n    </LineChartIdContext.Provider>\n  );\n}\n\nexport const useLineChartId = () => useContext(LineChartIdContext);\n\nexport function useLineChartData({ id }: { id?: string }) {\n  const dataContext = useContext(LineChartDataContext);\n\n  validateLineChartId(dataContext, id);\n\n  const data = dataContext[id || DefaultLineChartId];\n\n  return useMemo(() => ({ data }), [data]);\n}\n\nfunction validateLineChartId(dataContext: LineChartDataContext, id?: string) {\n  if (id != null && !dataContext[id]) {\n    const otherIds = Object.keys(dataContext).filter(\n      (otherId) => otherId !== DefaultLineChartId\n    );\n    const singular = otherIds.length <= 1;\n\n    const joinedIds = otherIds.join(', ');\n\n    const suggestion = otherIds.length\n      ? `Did you mean to use ${\n          singular ? 'this ID' : 'one of these IDs'\n        }: ${joinedIds}`\n      : `You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?`;\n\n    console.warn(\n      `[react-native-wagmi-charts] Invalid usage of \"id\" prop on LineChart. You passed id=\"${id}\", but this ID does not exist in your <LineChart.Provider />'s \"data\" prop.\n\n${suggestion}`\n    );\n  } else if (id == null && !dataContext[DefaultLineChartId]) {\n    const otherIds = Object.keys(dataContext);\n    const singular = otherIds.length <= 1;\n\n    const joinedIds = otherIds.join(', ');\n    const suggestion = otherIds.length\n      ? `Did you mean to use ${\n          singular ? 'this ID' : 'one of these IDs'\n        }: ${joinedIds}`\n      : `You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?`;\n\n    console.error(`[react-native-wagmi-charts] Missing data \"id\" prop on LineChart. You must pass an id prop to <LineChart /> when using a dictionary for your data.\n\n${suggestion}\n    `);\n  }\n}\n"]}