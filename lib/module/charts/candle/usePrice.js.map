{"version":3,"sources":["usePrice.ts"],"names":["useDerivedValue","formatPrice","useCandlestickChart","getPrice","useCandleData","useCandlestickChartPrice","format","precision","type","currentY","domain","height","candle","float","price","y","value","Math","min","max","maxHeight","toFixed","toString","formatted","formattedPrice"],"mappings":"AAAA,SAAmBA,eAAnB,QAA0C,yBAA1C;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,SAASC,wBAAT,CAAkC;AACvCC,EAAAA,MADuC;AAEvCC,EAAAA,SAAS,GAAG,CAF2B;AAGvCC,EAAAA,IAAI,GAAG;AAHgC,IAQrC,EARG,EAWL;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,MAA+BT,mBAAmB,EAAxD;AACA,QAAMU,MAAM,GAAGR,aAAa,EAA5B;AAEA,QAAMS,KAAK,GAAGb,eAAe,CAAC,MAAM;AAClC,QAAIc,KAAK,GAAG,CAAZ;;AACA,QAAIN,IAAI,KAAK,WAAb,EAA0B;AACxBM,MAAAA,KAAK,GAAGX,QAAQ,CAAC;AACfY,QAAAA,CAAC,EAAEN,QAAQ,CAACO,KADG;AAEfN,QAAAA,MAAM,EAAE,CAACO,IAAI,CAACC,GAAL,CAAS,GAAGR,MAAZ,CAAD,EAAsBO,IAAI,CAACE,GAAL,CAAS,GAAGT,MAAZ,CAAtB,CAFO;AAGfU,QAAAA,SAAS,EAAET;AAHI,OAAD,CAAhB;AAKD,KAND,MAMO;AACLG,MAAAA,KAAK,GAAGF,MAAM,CAACI,KAAP,CAAaR,IAAb,CAAR;AACD;;AACD,QAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB,OAAO,EAAP;AAClB,WAAOA,KAAK,CAACO,OAAN,CAAcd,SAAd,EAAyBe,QAAzB,EAAP;AACD,GAb4B,CAA7B;AAcA,QAAMC,SAAS,GAAGvB,eAAe,CAAC,MAAM;AACtC,QAAI,CAACa,KAAK,CAACG,KAAX,EAAkB,OAAO,EAAP;AAClB,UAAMQ,cAAc,GAAGvB,WAAW,CAAC;AAAEe,MAAAA,KAAK,EAAEH,KAAK,CAACG;AAAf,KAAD,CAAlC;AACA,WAAOV,MAAM,GACTA,MAAM,CAAC;AAAEU,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBO,MAAAA,SAAS,EAAEC;AAAjC,KAAD,CADG,GAETA,cAFJ;AAGD,GANgC,CAAjC;AAQA,SAAO;AAAER,IAAAA,KAAK,EAAEH,KAAT;AAAgBU,IAAAA;AAAhB,GAAP;AACD","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatPrice } from '../../utils';\nimport { useCandlestickChart } from './useCandlestickChart';\nimport { getPrice } from './utils';\nimport type { TFormatterFn, TPriceType } from './types';\nimport { useCandleData } from './useCandleData';\n\nexport function useCandlestickChartPrice({\n  format,\n  precision = 2,\n  type = 'crosshair',\n}: {\n  format?: TFormatterFn<string>;\n  precision?: number;\n  type?: TPriceType;\n} = {}): {\n  value: Readonly<Animated.SharedValue<string>>;\n  formatted: Readonly<Animated.SharedValue<string>>;\n} {\n  const { currentY, domain, height } = useCandlestickChart();\n  const candle = useCandleData();\n\n  const float = useDerivedValue(() => {\n    let price = 0;\n    if (type === 'crosshair') {\n      price = getPrice({\n        y: currentY.value,\n        domain: [Math.min(...domain), Math.max(...domain)],\n        maxHeight: height,\n      });\n    } else {\n      price = candle.value[type];\n    }\n    if (price === -1) return '';\n    return price.toFixed(precision).toString();\n  });\n  const formatted = useDerivedValue(() => {\n    if (!float.value) return '';\n    const formattedPrice = formatPrice({ value: float.value });\n    return format\n      ? format({ value: float.value, formatted: formattedPrice })\n      : formattedPrice;\n  });\n\n  return { value: float, formatted };\n}\n"]}