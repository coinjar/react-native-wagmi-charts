{"version":3,"sources":["Context.tsx"],"names":["React","useSharedValue","getDomain","CandlestickChartContext","createContext","currentX","value","currentY","data","height","width","domain","step","setWidth","undefined","setHeight","CandlestickChartProvider","children","useState","setStep","useMemo","useEffect","length","newStep","contextValue"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAGA,SAASC,SAAT,QAA0B,SAA1B;AAEA,OAAO,MAAMC,uBAAuB,gBAAGH,KAAK,CAACI,aAAN,CAA8B;AACnEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,KAAK,EAAE,CAAC;AAAV,GADyD;AAEnEC,EAAAA,QAAQ,EAAE;AAAED,IAAAA,KAAK,EAAE,CAAC;AAAV,GAFyD;AAGnEE,EAAAA,IAAI,EAAE,EAH6D;AAInEC,EAAAA,MAAM,EAAE,CAJ2D;AAKnEC,EAAAA,KAAK,EAAE,CAL4D;AAMnEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAN2D;AAOnEC,EAAAA,IAAI,EAAE,CAP6D;AAQnEC,EAAAA,QAAQ,EAAE,MAAMC,SARmD;AASnEC,EAAAA,SAAS,EAAE,MAAMD;AATkD,CAA9B,CAAhC;AAmBP,OAAO,SAASE,wBAAT,CAAkC;AACvCC,EAAAA,QADuC;AAEvCT,EAAAA,IAAI,GAAG;AAFgC,CAAlC,EAG2B;AAChC,QAAM,CAACE,KAAD,EAAQG,QAAR,IAAoBb,KAAK,CAACkB,QAAN,CAAe,CAAf,CAA1B;AACA,QAAM,CAACT,MAAD,EAASM,SAAT,IAAsBf,KAAK,CAACkB,QAAN,CAAe,CAAf,CAA5B;AACA,QAAM,CAACN,IAAD,EAAOO,OAAP,IAAkBnB,KAAK,CAACkB,QAAN,CAAe,CAAf,CAAxB;AACA,QAAMb,QAAQ,GAAGJ,cAAc,CAAC,CAAC,CAAF,CAA/B;AACA,QAAMM,QAAQ,GAAGN,cAAc,CAAC,CAAC,CAAF,CAA/B;AAEA,QAAMU,MAAM,GAAGX,KAAK,CAACoB,OAAN,CAAc,MAAMlB,SAAS,CAACM,IAAD,CAA7B,EAAqC,CAACA,IAAD,CAArC,CAAf;AAEAR,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAIb,IAAI,CAACc,MAAT,EAAiB;AACf,YAAMC,OAAO,GAAGb,KAAK,GAAGF,IAAI,CAACc,MAA7B;AACAH,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD;AACF,GALD,EAKG,CAACf,IAAI,CAACc,MAAN,EAAcZ,KAAd,CALH;AAOA,QAAMc,YAAY,GAAGxB,KAAK,CAACoB,OAAN,CACnB,OAAO;AACLf,IAAAA,QADK;AAELE,IAAAA,QAFK;AAGLC,IAAAA,IAHK;AAILE,IAAAA,KAJK;AAKLD,IAAAA,MALK;AAMLE,IAAAA,MANK;AAOLC,IAAAA,IAPK;AAQLC,IAAAA,QARK;AASLE,IAAAA,SATK;AAULI,IAAAA;AAVK,GAAP,CADmB,EAanB,CAACd,QAAD,EAAWE,QAAX,EAAqBC,IAArB,EAA2BG,MAA3B,EAAmCF,MAAnC,EAA2CG,IAA3C,EAAiDF,KAAjD,CAbmB,CAArB;AAgBA,sBACE,oBAAC,uBAAD,CAAyB,QAAzB;AAAkC,IAAA,KAAK,EAAEc;AAAzC,KACGP,QADH,CADF;AAKD","sourcesContent":["import * as React from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\n\nimport type { TContext, TData } from './types';\nimport { getDomain } from './utils';\n\nexport const CandlestickChartContext = React.createContext<TContext>({\n  currentX: { value: -1 },\n  currentY: { value: -1 },\n  data: [],\n  height: 0,\n  width: 0,\n  domain: [0, 0],\n  step: 0,\n  setWidth: () => undefined,\n  setHeight: () => undefined,\n});\n\ntype CandlestickChartProviderProps = {\n  children: React.ReactNode;\n  data: TData;\n  width?: number;\n  height?: number;\n};\n\nexport function CandlestickChartProvider({\n  children,\n  data = [],\n}: CandlestickChartProviderProps) {\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const [step, setStep] = React.useState(0);\n  const currentX = useSharedValue(-1);\n  const currentY = useSharedValue(-1);\n\n  const domain = React.useMemo(() => getDomain(data), [data]);\n\n  React.useEffect(() => {\n    if (data.length) {\n      const newStep = width / data.length;\n      setStep(newStep);\n    }\n  }, [data.length, width]);\n\n  const contextValue = React.useMemo(\n    () => ({\n      currentX,\n      currentY,\n      data,\n      width,\n      height,\n      domain,\n      step,\n      setWidth,\n      setHeight,\n      setStep,\n    }),\n    [currentX, currentY, data, domain, height, step, width]\n  );\n\n  return (\n    <CandlestickChartContext.Provider value={contextValue}>\n      {children}\n    </CandlestickChartContext.Provider>\n  );\n}\n"]}