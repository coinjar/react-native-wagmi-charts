{"version":3,"sources":["getPath.ts"],"names":["getPath","data","from","to","width","height","gutter","shape","_shape","yDomain","timestamps","map","_","i","scaleX","domain","Math","min","max","range","scaleY","path","line","defined","d","slice","undefined","find","item","timestamp","x","y","value","curve"],"mappings":";;;;;;;AACA;;AAEA;;;;;;AAHA;AAEA;AAKO,SAASA,OAAT,CAAiB;AACtBC,EAAAA,IADsB;AAEtBC,EAAAA,IAFsB;AAGtBC,EAAAA,EAHsB;AAItBC,EAAAA,KAJsB;AAKtBC,EAAAA,MALsB;AAMtBC,EAAAA,MANsB;AAOtBC,EAAAA,KAAK,EAAEC,MAPe;AAQtBC,EAAAA;AARsB,CAAjB,EAkBI;AACT,QAAMC,UAAU,GAAGT,IAAI,CAACU,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAnB,CAAnB;AAEA,QAAMC,MAAM,GAAG,4BACZC,MADY,CACL,CAACC,IAAI,CAACC,GAAL,CAAS,GAAGP,UAAZ,CAAD,EAA0BM,IAAI,CAACE,GAAL,CAAS,GAAGR,UAAZ,CAA1B,CADK,EAEZS,KAFY,CAEN,CAAC,CAAD,EAAIf,KAAJ,CAFM,CAAf;AAGA,QAAMgB,MAAM,GAAG,4BACZL,MADY,CACL,CAACN,OAAO,CAACQ,GAAT,EAAcR,OAAO,CAACS,GAAtB,CADK,EAEZC,KAFY,CAEN,CAACd,MAAM,GAAGC,MAAV,EAAkBA,MAAlB,CAFM,CAAf;AAGA,QAAMe,IAAI,GAAGd,KAAK,CACfe,IADU,GAEVC,OAFU,CAEDC,CAAD,IACPtB,IAAI,IAAIC,EAAR,GACIF,IAAI,CACDwB,KADH,CACSvB,IADT,EACeC,EAAE,GAAGA,EAAE,GAAG,CAAR,GAAYuB,SAD7B,EAEGC,IAFH,CAESC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmBL,CAAC,CAACK,SAFvC,CADJ,GAII,IAPK,EASVC,CATU,CASR,CAAClB,CAAD,EAAaC,CAAb,KAA2BC,MAAM,CAACD,CAAD,CATzB,EAUVkB,CAVU,CAUPP,CAAD,IAA0BJ,MAAM,CAACI,CAAC,CAACQ,KAAH,CAVxB,EAWVC,KAXU,CAWJzB,MAXI,EAWIP,IAXJ,CAAb;AAYA,SAAOoB,IAAP;AACD","sourcesContent":["// @ts-ignore\nimport * as shape from 'd3-shape';\n// @ts-ignore\nimport { scaleLinear } from 'd3-scale';\n\nimport type { TLineChartData, YDomain } from '../types';\n\nexport function getPath({\n  data,\n  from,\n  to,\n  width,\n  height,\n  gutter,\n  shape: _shape,\n  yDomain,\n}: {\n  data: TLineChartData;\n  from?: number;\n  to?: number;\n  width: number;\n  height: number;\n  gutter: number;\n  shape?: unknown;\n  yDomain: YDomain;\n}): string {\n  const timestamps = data.map((_, i) => i);\n\n  const scaleX = scaleLinear()\n    .domain([Math.min(...timestamps), Math.max(...timestamps)])\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain([yDomain.min, yDomain.max])\n    .range([height - gutter, gutter]);\n  const path = shape\n    .line()\n    .defined((d: { timestamp: number }) =>\n      from || to\n        ? data\n            .slice(from, to ? to + 1 : undefined)\n            .find((item) => item.timestamp === d.timestamp)\n        : true\n    )\n    .x((_: unknown, i: number) => scaleX(i))\n    .y((d: { value: number }) => scaleY(d.value))\n    .curve(_shape)(data);\n  return path;\n}\n"]}