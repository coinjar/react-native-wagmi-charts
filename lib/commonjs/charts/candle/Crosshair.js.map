{"version":3,"sources":["Crosshair.tsx"],"names":["CandlestickChartCrosshair","color","onCurrentXChange","children","horizontalCrosshairProps","verticalCrosshairProps","lineProps","props","width","height","React","useContext","CandlestickChartDimensionsContext","currentX","currentY","step","tooltipPosition","opacity","onGestureEvent","onActive","x","y","boundedX","value","onEnd","horizontal","transform","translateY","vertical","translateX","data","prevData","StyleSheet","absoluteFill","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, ViewProps } from 'react-native';\nimport {\n  GestureEvent,\n  LongPressGestureHandler,\n  LongPressGestureHandlerEventPayload,\n  LongPressGestureHandlerProps,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useSharedValue,\n  useAnimatedStyle,\n  useAnimatedReaction,\n  runOnJS,\n} from 'react-native-reanimated';\nimport { clamp } from 'react-native-redash';\n\nimport { CandlestickChartDimensionsContext } from './Chart';\nimport { CandlestickChartLine, CandlestickChartLineProps } from './Line';\nimport { useCandlestickChart } from './useCandlestickChart';\nimport { CandlestickChartCrosshairTooltipContext } from './CrosshairTooltip';\n\ntype CandlestickChartCrosshairProps = LongPressGestureHandlerProps & {\n  color?: string;\n  children?: React.ReactNode;\n  onCurrentXChange?: (value: number) => unknown;\n  horizontalCrosshairProps?: Animated.AnimateProps<ViewProps>;\n  verticalCrosshairProps?: Animated.AnimateProps<ViewProps>;\n  lineProps?: Partial<CandlestickChartLineProps>;\n};\n\nexport function CandlestickChartCrosshair({\n  color,\n  onCurrentXChange,\n  children,\n  horizontalCrosshairProps = {},\n  verticalCrosshairProps = {},\n  lineProps = {},\n  ...props\n}: CandlestickChartCrosshairProps) {\n  const { width, height } = React.useContext(CandlestickChartDimensionsContext);\n  const { currentX, currentY, step } = useCandlestickChart();\n\n  const tooltipPosition = useSharedValue<'left' | 'right'>('left');\n\n  const opacity = useSharedValue(0);\n  const onGestureEvent = useAnimatedGestureHandler<\n    GestureEvent<LongPressGestureHandlerEventPayload>\n  >({\n    onActive: ({ x, y }) => {\n      const boundedX = x <= width - 1 ? x : width - 1;\n      if (boundedX < 100) {\n        tooltipPosition.value = 'right';\n      } else {\n        tooltipPosition.value = 'left';\n      }\n      opacity.value = 1;\n      currentY.value = clamp(y, 0, height);\n      currentX.value = boundedX - (boundedX % step) + step / 2;\n    },\n    onEnd: () => {\n      opacity.value = 0;\n      currentY.value = -1;\n      currentX.value = -1;\n    },\n  });\n  const horizontal = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    transform: [{ translateY: currentY.value }],\n  }));\n  const vertical = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    transform: [{ translateX: currentX.value }],\n  }));\n\n  useAnimatedReaction(\n    () => currentX.value,\n    (data, prevData) => {\n      if (data !== -1 && data !== prevData && onCurrentXChange) {\n        runOnJS(onCurrentXChange)(data);\n      }\n    }\n  );\n\n  return (\n    <LongPressGestureHandler\n      minDurationMs={0}\n      maxDist={999999}\n      onGestureEvent={onGestureEvent}\n      {...props}\n    >\n      <Animated.View style={StyleSheet.absoluteFill}>\n        <Animated.View\n          style={[StyleSheet.absoluteFill, horizontal]}\n          {...horizontalCrosshairProps}\n        >\n          <CandlestickChartLine color={color} x={width} y={0} {...lineProps} />\n          <CandlestickChartCrosshairTooltipContext.Provider\n            value={{ position: tooltipPosition }}\n          >\n            {children}\n          </CandlestickChartCrosshairTooltipContext.Provider>\n        </Animated.View>\n        <Animated.View\n          style={[StyleSheet.absoluteFill, vertical]}\n          {...verticalCrosshairProps}\n        >\n          <CandlestickChartLine color={color} x={0} y={height} {...lineProps} />\n        </Animated.View>\n      </Animated.View>\n    </LongPressGestureHandler>\n  );\n}\n"]}