{"version":3,"sources":["Candle.tsx"],"names":["AnimatedRect","Animated","createAnimatedComponent","Rect","AnimatedLine","Line","CandlestickChartCandle","candle","maxHeight","domain","margin","positiveColor","negativeColor","rectProps","overrideRectProps","lineProps","overrideLineProps","index","width","useAnimations","renderLine","props","renderRect","close","open","high","low","isPositive","fill","x","max","Math","min","React","useMemo","stroke","strokeWidth","direction","x1","y1","value","x2","y2","animatedLineProps","y","height","animatedRectProps","animatedProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Animated, {\n  withTiming,\n  useAnimatedProps,\n} from 'react-native-reanimated';\nimport {\n  Color,\n  Line,\n  LineProps,\n  NumberProp,\n  Rect,\n  RectProps,\n} from 'react-native-svg';\n\nimport type { TCandle, TDomain } from './types';\nimport { getY, getHeight } from './utils';\n\nconst AnimatedRect = Animated.createAnimatedComponent(Rect);\nconst AnimatedLine = Animated.createAnimatedComponent(Line);\n\nexport type CandlestickChartCandleProps = {\n  candle: TCandle;\n  domain: TDomain;\n  maxHeight: number;\n  margin?: number;\n  positiveColor?: string;\n  negativeColor?: string;\n  index: number;\n  width: number;\n  rectProps?: RectProps;\n  lineProps?: LineProps;\n  useAnimations?: boolean;\n  renderRect?: ({\n    x,\n    y,\n    width,\n    height,\n    fill,\n  }: {\n    x: NumberProp;\n    y: NumberProp;\n    width: NumberProp;\n    height: NumberProp;\n    fill: Color;\n    useAnimations: boolean;\n  }) => React.ReactNode;\n  renderLine?: ({\n    x1,\n    y1,\n    x2,\n    y2,\n    stroke,\n    strokeWidth,\n  }: {\n    x1: NumberProp;\n    y1: NumberProp;\n    x2: NumberProp;\n    y2: NumberProp;\n    stroke: Color;\n    strokeWidth: NumberProp;\n    useAnimations: boolean;\n  }) => React.ReactNode;\n};\n\nexport const CandlestickChartCandle = ({\n  candle,\n  maxHeight,\n  domain,\n  margin = 2,\n  positiveColor = '#10b981',\n  negativeColor = '#ef4444',\n  rectProps: overrideRectProps,\n  lineProps: overrideLineProps,\n  index,\n  width,\n  useAnimations = true,\n  renderLine = (props) =>\n    props.useAnimations ? <AnimatedLine {...props} /> : <Line {...props} />,\n  renderRect = (props) =>\n    props.useAnimations ? <AnimatedRect {...props} /> : <Rect {...props} />,\n}: CandlestickChartCandleProps) => {\n  const { close, open, high, low } = candle;\n  const isPositive = close > open;\n  const fill = isPositive ? positiveColor : negativeColor;\n  const x = index * width;\n  const max = Math.max(open, close);\n  const min = Math.min(open, close);\n\n  const lineProps = React.useMemo(\n    () => ({\n      stroke: fill,\n      strokeWidth: 1,\n      direction: isPositive ? 'positive' : 'negative',\n      x1: x + width / 2,\n      y1: getY({ maxHeight, value: low, domain }),\n      x2: x + width / 2,\n      y2: getY({ maxHeight, value: high, domain }),\n      ...overrideLineProps,\n    }),\n    [\n      domain,\n      fill,\n      high,\n      isPositive,\n      low,\n      maxHeight,\n      overrideLineProps,\n      width,\n      x,\n    ]\n  );\n  const animatedLineProps = useAnimatedProps(() => ({\n    x1: withTiming(x + width / 2),\n    y1: withTiming(getY({ maxHeight, value: low, domain })),\n    x2: withTiming(x + width / 2),\n    y2: withTiming(getY({ maxHeight, value: high, domain })),\n  }));\n\n  const rectProps = React.useMemo(\n    () => ({\n      width: width - margin * 2,\n      fill: fill,\n      direction: isPositive ? 'positive' : 'negative',\n      x: x + margin,\n      y: getY({ maxHeight, value: max, domain }),\n      height: getHeight({ maxHeight, value: max - min, domain }),\n      ...overrideRectProps,\n    }),\n    [\n      domain,\n      fill,\n      isPositive,\n      margin,\n      max,\n      maxHeight,\n      min,\n      overrideRectProps,\n      width,\n      x,\n    ]\n  );\n  const animatedRectProps = useAnimatedProps(() => ({\n    x: withTiming(x + margin),\n    y: withTiming(getY({ maxHeight, value: max, domain })),\n    height: withTiming(getHeight({ maxHeight, value: max - min, domain })),\n  }));\n\n  return (\n    <>\n      {renderLine({\n        ...lineProps,\n        useAnimations,\n        ...(useAnimations ? { animatedProps: animatedLineProps } : {}),\n      })}\n      {renderRect({\n        ...rectProps,\n        useAnimations,\n        ...(useAnimations ? { animatedProps: animatedRectProps } : {}),\n      })}\n    </>\n  );\n};\n"]}