{"version":3,"sources":["AnimatedText.tsx"],"names":["Animated","addWhitelistedNativeProps","text","AnimatedTextInput","createAnimatedComponent","TextInput","AnimatedText","style","inputRef","React","useRef","Platform","OS","value","data","prevData","current","animatedProps","select","web","styles","StyleSheet","create","color"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;;;;;;;AALA;AAUAA,+BAASC,yBAAT,CAAmC;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAnC;;AAOA,MAAMC,iBAAiB,GAAGH,+BAASI,uBAAT,CAAiCC,sBAAjC,CAA1B;;AAEO,MAAMC,YAAY,GAAG,CAAC;AAAEJ,EAAAA,IAAF;AAAQK,EAAAA;AAAR,CAAD,KAAwC;AAClE,QAAMC,QAAQ,GAAGC,eAAMC,MAAN,CAAkB,IAAlB,CAAjB,CADkE,CACxB;;;AAE1C,MAAIC,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB;AACA;AACA;AACA;AAEA;AACA,oDACE,MAAM;AACJ,aAAOV,IAAI,CAACW,KAAZ;AACD,KAHH,EAIE,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAClB,UAAID,IAAI,KAAKC,QAAT,IAAqBP,QAAQ,CAACQ,OAAlC,EAA2C;AACzCR,QAAAA,QAAQ,CAACQ,OAAT,CAAiBH,KAAjB,GAAyBC,IAAzB;AACD;AACF,KARH;AAUD;;AACD,QAAMG,aAAa,GAAG,6CAAiB,MAAM;AAC3C,WAAO;AACLf,MAAAA,IAAI,EAAEA,IAAI,CAACW,KADN,CAEL;AACA;;AAHK,KAAP;AAKD,GANqB,CAAtB;AAOA,sBACE,6BAAC,iBAAD;AACE,IAAA,qBAAqB,EAAC,aADxB;AAEE,IAAA,QAAQ,EAAE,KAFZ;AAGE,IAAA,GAAG,EAAEF,sBAASO,MAAT,CAAgB;AAAEC,MAAAA,GAAG,EAAEX;AAAP,KAAhB,CAHP;AAIE,IAAA,KAAK,EAAEN,IAAI,CAACW,KAJd;AAKE,IAAA,KAAK,EAAE,CAACO,MAAM,CAAClB,IAAR,EAAcK,KAAd,CALT;AAME,IAAA,aAAa,EAAEU;AANjB,IADF;AAUD,CAtCM;;;;AAwCP,MAAMG,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BpB,EAAAA,IAAI,EAAE;AACJqB,IAAAA,KAAK,EAAE;AADH;AADyB,CAAlB,CAAf","sourcesContent":["// forked from https://github.com/wcandillon/react-native-redash/blob/master/src/ReText.tsx\n\nimport React from 'react';\nimport { Platform, StyleSheet, TextProps as RNTextProps } from 'react-native';\nimport { TextInput } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedReaction,\n} from 'react-native-reanimated';\n\nAnimated.addWhitelistedNativeProps({ text: true });\n\ninterface AnimatedTextProps {\n  text: Animated.SharedValue<string>;\n  style?: Animated.AnimateProps<RNTextProps>['style'];\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport const AnimatedText = ({ text, style }: AnimatedTextProps) => {\n  const inputRef = React.useRef<any>(null); // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  if (Platform.OS === 'web') {\n    // For some reason, the worklet reaction evaluates upfront regardless of any\n    // conditionals within it, causing Android to crash upon the invokation of `setNativeProps`.\n    // We are going to break the rules of hooks here so it doesn't invoke `useAnimatedReaction`\n    // for platforms outside of the web.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedReaction(\n      () => {\n        return text.value;\n      },\n      (data, prevData) => {\n        if (data !== prevData && inputRef.current) {\n          inputRef.current.value = data;\n        }\n      }\n    );\n  }\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: text.value,\n      // Here we use any because the text prop is not available in the type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  });\n  return (\n    <AnimatedTextInput\n      underlineColorAndroid=\"transparent\"\n      editable={false}\n      ref={Platform.select({ web: inputRef })}\n      value={text.value}\n      style={[styles.text, style]}\n      animatedProps={animatedProps}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    color: 'black',\n  },\n});\n"]}